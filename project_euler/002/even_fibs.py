'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

def even_fib_total(upper_bound):
    '''
    This function loops through all Fibonacci numbers starting at 1. If the
    number is even, adds it to the variable "total". Runtime complexity of O(n).
    Only keeps 3 integers in memory at a time.
    '''
    total, fib1, fib2 = 0, 1, 1
    while True:
        fib1, fib2 = fib2, fib2 + fib1
        if fib2 >= upper_bound:
            return total
        if fib2 % 2 == 0:
            total += fib2

if __name__ == '__main__':
    print(even_fib_total(4000000))

